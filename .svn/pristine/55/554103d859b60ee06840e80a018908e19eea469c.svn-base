package com.newcloud.waf.util;

import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.Period;
import java.util.Calendar;
import java.util.Date;

public class ShyyDateUtil {
	
	/**
	 * 去掉日期中的各种符号
	 * 
	 * @param date
	 * @return
	 */
	public static String formatDate(String date){
		if(date.indexOf("-")!=-1){
			date = date.replace("-", "");
		}
		if (date.indexOf("/")!=-1) {
			date = date.replace("/", "");
		}
		if (date.indexOf(":")!=-1) {
			date = date.replace(":", "");
		}
		if (date.indexOf(" ")!=-1) {
			date = date.replace(" ", "");
		}
		if (date.indexOf("_")!=-1) {
			date = date.replace("_", "");
		}
		return date;
	}
	
	/**
	 * 返回带间隔符的日期
	 *  
	 * @param date 	20200101
	 * @param spl  	-
	 * @return		2020-01-01
	 */
	public static String getSplitDate(String date,String spl) {
		return date.substring(0,4)+spl+date.substring(4,6)+spl+date.substring(6,8);
	}
	
	/**
	 * 计算年龄
	 * 
	 * @param beginDate	2012-04-28
	 * @param endDate	2012-04-28
	 * 
	 * @return			5岁5个月13天
	 */
	public static String getAgeSpace(String beginDate,String endDate) {
		Period period = Period.between(LocalDate.parse(beginDate), LocalDate.parse(endDate));
   	 	return period.getYears()+"岁"+period.getMonths()+"个月"+period.getDays()+"天";
	}
	
	 /**
     * 计算月数
     * 
	 * @param beginDate	2012-04-28
	 * @param endDate	2012-04-28
	 * @return			18
     */
    public static Long getMonthSpace(String beginDate, String endDate){
    	Period period = Period.between(LocalDate.parse(beginDate), LocalDate.parse(endDate));
   	 	return period.toTotalMonths();
    }
    
	/**
	 * 计算天数
	 * 
	 * @param beginDate	2012-04-28
	 * @param endDate	2012-04-28
	 * @return			1234
     */
    public static Long getDaySpace(String beginDate, String endDate) {
    	Duration duration = Duration.between(LocalDate.parse(beginDate).atStartOfDay(), LocalDate.parse(endDate).atStartOfDay());
   	 	return duration.toDays()+1L;
    }
	
	/**
     * 将秒时间戳格式化为定制日期格式
     * 
     * @param time		1577808000
     * @param fomrat	yyyy-MM-dd
     * @return			2020-01-01
     */
    public static String formatTimeDate(Long time, String fomrat) {
        Date date = new Date(time * 1000);
        return new SimpleDateFormat(fomrat).format(date);
    }
    
    /**
     * 将日期转化为时间戳
     * 
     * @param date		2020-01-01
     * @param fomrat	yyyy-MM-dd
     * @return			1577808000
     */
	public static Long getDateTime(String date,String fomrat) {
		SimpleDateFormat sdf = new SimpleDateFormat(fomrat);
		try {
			long time = sdf.parse(date).getTime()/1000L;
			return time;
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return 0L;
	}
    
    /**
     * 将Date类型转为指定字符串
     * 
     * @param date		Date类型
     * @param format	yyyy-MM-dd
     * @return			2020-01-01
     */
	public static String formatDateToString(Date date, String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        return sdf.format(date);
    }
	
	/**
     * 将Date类型转为指定字符串
     * 
     * @param date		2020-01-01
     * @param format	yyyy-MM-dd
     * @return			Date类型
     */
	public static Date formatStringToDate(String date, String format) {
        SimpleDateFormat formate = new SimpleDateFormat(format);
        Date formatdate = null;
        try {
            formatdate = formate.parse(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return formatdate;
    }
    
    /**
     * 当天的日期字符串
     * 
     * @param format	yyyy-MM-dd
     * @return			2020-01-01
     */
    public static String getToday(String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        return sdf.format(new Date());
    }
    
    /**
     * 获取某日的后N天
     * 
     * @param date		20200101
     * @param format	yyyyMMdd
     * @param day		1
     * @return			20200102
     */
    public static String getNextDay(String date,Integer day,String format){
    	try {
	    	SimpleDateFormat sf = new SimpleDateFormat(format);
			Calendar c = Calendar.getInstance(); 
			c.setTime(sf.parse(date));  
			c.add(Calendar.DAY_OF_MONTH, day); 
			return sf.format(c.getTime());
    	}catch (Exception e) {
    		 e.printStackTrace();
		}
    	return null;
	}
    
    /**
     * 获取某日的后N月
     * 
     * @param date		20200101
     * @param format	yyyyMMdd
     * @param month	1
     * @return			20200201
     */
    public static String getNextMonth(String date,Integer month,String format){
    	try {
	    	SimpleDateFormat sf = new SimpleDateFormat(format);
			Calendar c = Calendar.getInstance(); 
			c.setTime(sf.parse(date));  
			c.add(Calendar.MONTH, month); 
			return sf.format(c.getTime());
    	}catch (Exception e) {
    		 e.printStackTrace();
		}
    	return null;
	}
    
    /**
     * 获取当日的后N月
     * 
     * @param date		20200101
     * @param format	yyyyMMdd
     * @param month	1
     * @return			20200201
     */
    public static String getNextMonth(Integer month,String format){
    	try {
	    	SimpleDateFormat sf = new SimpleDateFormat(format);
			Calendar c = Calendar.getInstance(); 
			c.setTime(new Date());  
			c.add(Calendar.MONTH, month); 
			return sf.format(c.getTime());
    	}catch (Exception e) {
    		 e.printStackTrace();
		}
    	return null;
	}
    
	/**
	 * 获取当前时间往前多少分钟整5分钟时间
	 * 
	 * @param time	秒速,取值为300，600，900，1200
	 * @return
	 */
	public static long getNowTime(long time){
		Long times = System.currentTimeMillis()/1000L;
		times = times - times%60L;
		times = times-(times%300L)-time;
		return times;
	}

	/**
	 * 获取昨天0点的时间戳
	 * 
	 * @return
	 */
	public static long getYesterday0Timestamp() {
		Calendar calendar = Calendar.getInstance();
	    calendar.set(calendar.get(Calendar.YEAR),calendar.get(Calendar.MONTH),calendar.get(Calendar.DAY_OF_MONTH)-1,0,0,0);
	    long tt = calendar.getTime().getTime()/1000;
		return tt;
	}
	
	 /**
     * 根据时间戳返回日期
     * @param timestamp
     * @return
     */
    public static String getDateTime(long timestamp) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        Date date = new Date(timestamp);
        String day = sdf.format(date);
        return day;
    }
    
    /**
     * 根据时间戳返回日期
     * @param timestamp
     * @return
     */
    public static String getDateTime(long timestamp,String format) {
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        Date date = new Date(timestamp);
        String day = sdf.format(date);
        return day;
    }
    
    
    public static String getLastDayOfMonth(int year,int month)
    {
        Calendar cal = Calendar.getInstance();
        //设置年份
        cal.set(Calendar.YEAR,year);
        //设置月份
        cal.set(Calendar.MONTH, month-1);
        //获取某月最大天数
        int lastDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
        //设置日历中月份的最大天数
        cal.set(Calendar.DAY_OF_MONTH, lastDay);
        //格式化日期
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        String lastDayOfMonth = sdf.format(cal.getTime());  
        return lastDayOfMonth;
    }
    
    /**
     * 将Date类型转为指定字符串(返回当日的24点)
     * 
     * @param date		2020-01-01
     * @param format	yyyy-MM-dd
     * @return			Date类型
     */
	public static Date formatStringToDate24(String date, String format) {
        SimpleDateFormat formate = new SimpleDateFormat(format);
        Date formatdate = null;
        Date tomorrow=null;
        try {
            formatdate = formate.parse(date);
            Calendar c = Calendar.getInstance();
			c.setTime(formatdate);
			c.add(Calendar.DAY_OF_MONTH,1);// 今天+1天
			tomorrow=c.getTime();
        } catch (ParseException e) {
            e.printStackTrace();
        }
        return tomorrow;
    }
	
	/**
	 * time 2019-05-21T08:44:00Z
	 * format yyyy-MM-dd HH:mm:ss
	 */
	public static String formatUTCToCST(String time, String format) {
		String result="";
	     try {
	    	 Date date = null;
		     SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");
			 date = sdf.parse(time);
		     Calendar calendar = Calendar.getInstance();
		     calendar.setTime(date);
		     calendar.set(Calendar.HOUR,calendar.get(Calendar.HOUR)+8);
		     SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		     result = simpleDateFormat.format(calendar.getTime());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		return result;
	   
    }
	
    /** 
      * 获取过去第几天的日期 
      * 
      * @param past 
      * @return 
      */  
     public static long getPastDate(int past) {  
         Calendar calendar = Calendar.getInstance();  
         calendar.set(Calendar.DAY_OF_YEAR, calendar.get(Calendar.DAY_OF_YEAR) - past);  
         Date today = calendar.getTime();  
         return today.getTime()/1000l;  
     }
	   
	 /**
	  * 获取0点的时间戳
	  * @return
	  */
	 public static long getZeroDate(long timestamp) {
		 SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
		 String curDate = s.format(timestamp*1000l); 
		 ParsePosition pos = new ParsePosition(0);
		 Date strtodate = s.parse(curDate, pos);
		 return strtodate.getTime()/1000l;
	 }
	 
	/**
	 * 将unix时间戳转换至指定格式的时间字符串
	 * 
	 * @param time
	 *            时间戳
	 * @param format
	 *            日期格式，如yyyy-MM-dd HH:mm
	 * @return
	 */
	public static String fromUnixtime(Long time, String format) {
		if (time != null) {
			SimpleDateFormat sdf = new SimpleDateFormat(format);
			Date date = new Date(time * 1000l);
			return sdf.format(date);
		} else {
			return null;
		}
	}

	   
}
