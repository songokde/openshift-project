package com.newcloud.waf.storage.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import com.newcloud.waf.connection.ConnectionFactory;
import com.newcloud.waf.storage.dao.IOverViewDAO;
import com.newcloud.waf.util.ShyyDateUtil;
@Repository
public class OverViewDAO implements IOverViewDAO{
	private SessionFactory sessionFactory;
	@Resource
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}

	protected Session openSession() {
		return sessionFactory.getCurrentSession();
	}
	@SuppressWarnings("resource")
	@Override
	public Map<String, Map<String, Integer>> findRecentMapByTime(Long begin7Timestamp, Long endTimestamp)
			throws Exception {
		Map<String, Map<String, Integer>> resultMap = new HashMap<String, Map<String,Integer>>();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String sqlSelect="select wai_type,count(*) as count,wai_timestamp from waf_attack_ip where  wai_timestamp between "+begin7Timestamp+" and "+endTimestamp+"   group by wai_type";
			String sqlSelect1="select wau_type,count(*) as count,wau_timestamp from waf_attack_url where  wau_timestamp between "+begin7Timestamp+" and "+endTimestamp+"   group by wau_type";
			conn = ConnectionFactory.getFactory().getWafConnection();
			ps = conn.prepareStatement(sqlSelect);
			rs = ps.executeQuery();
			while (rs.next()) {
				String key = rs.getString("wai_type");
				String time = ShyyDateUtil.getDateTime(rs.getLong("wai_timestamp"));
				Integer count = rs.getInt("count");
				if(resultMap.containsKey(key)) {
					if(resultMap.get(key).containsKey(time)) {
						Integer newCount = resultMap.get(key).get(time)+count;
						resultMap.get(key).replace(time,resultMap.get(key).get(time),newCount);
					}else {
						resultMap.get(key).put(time, count);
					}
				}else {
					 Map<String, Integer> map =new HashMap<>();
					 map.put(key, count);
					 resultMap.put(key, map);
				}
			}
			ps = conn.prepareStatement(sqlSelect1);
			rs = ps.executeQuery();
			while (rs.next()) {
				String key = rs.getString("wau_type");
				String time = ShyyDateUtil.getDateTime(rs.getLong("wau_timestamp"));
				Integer count = rs.getInt("count");
				if(resultMap.containsKey(key)) {
					if(resultMap.get(key).containsKey(time)) {
						Integer newCount = resultMap.get(key).get(time)+count;
						resultMap.get(key).replace(time, resultMap.get(key).get(time),newCount);
					}else {
						resultMap.get(key).put(time, count);
					}
				}else {
					 Map<String, Integer> map =new HashMap<>();
					 map.put(key, count);
					 resultMap.put(key, map);
				}
			}
		} catch (SQLException e) {
			throw e;
		} finally {
			ConnectionFactory.close(conn, ps, rs);
		}
		return null;
	}

	@Override
	public Map<String, Object> findTopIpByType(Integer domainId, String type) throws Exception {
		Map<String, Object> resultMap = new HashMap<String,Object>();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String sqlSelect="select count(wai_nodeip) as count, wai_nodeip from waf_attack_ip where  wai_type = "+type+" ";
			if(StringUtils.isEmpty(domainId)) {
				sqlSelect =sqlSelect+"and wai_dniid="+domainId+"";
			}
			sqlSelect =sqlSelect+" group by wai_nodeip order by count desc limit 0,5";
			conn = ConnectionFactory.getFactory().getWafConnection();
			ps = conn.prepareStatement(sqlSelect);
			rs = ps.executeQuery();
			while (rs.next()) {
				resultMap.put(rs.getString("wai_nodeip"), rs.getInt("count"));
			}
			
		} finally {
			ConnectionFactory.close(conn, ps, rs);
		}
		return null;
	}

	@Override
	public Map<String, Object> findTopAreaByType(Integer domainId, String type) throws Exception {
	    Map<String, Object> resultMap = new HashMap<String,Object>();
		Connection conn = null;
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			String sqlSelect="select count(wai_area) as count ,wai_area from waf_attack_ip where  wai_type = "+type+" ";
			if(StringUtils.isEmpty(domainId)) {
				sqlSelect =sqlSelect+"and wai_dniid="+domainId+"";
			}
			sqlSelect =sqlSelect+" group by wai_area order by count desc limit 0,5";
			conn = ConnectionFactory.getFactory().getWafConnection();
			ps = conn.prepareStatement(sqlSelect);
			rs = ps.executeQuery();
			while (rs.next()) {
				resultMap.put(rs.getString("wai_area"), rs.getInt("count"));
			}
		} catch (SQLException e) {
			throw e;
		} finally {
			ConnectionFactory.close(conn, ps, rs);
		}
		return null;
	}


	
	
}
